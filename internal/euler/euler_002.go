package euler

import (
	"fmt"
	tools2 "github.com/hultan/euler/internal/tools"
	"time"
)

type Euler002 struct {
	Name string
	Description string
	Answer string
	CorrectAnswer    string
}

func NewEuler002() *Euler002 {
	e := new(Euler002)
	e.Name = "002 : Even Fibonacci numbers"
	e.Description ="Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
	e.CorrectAnswer = "4613732"
	return e
}

func (e *Euler002) PrintDescription() {
	fmt.Println()
	fmt.Println(e.Name)
	fmt.Println("----------------------------")
	fmt.Println(e.Description)
	fmt.Println()
}

func (e *Euler002) GetAnswer() string {
	return e.CorrectAnswer
}

func (e *Euler002) Solve() string{
	start:=time.Now()

	var answer int64 = 0
	var fib, last, last2 int64 = 1,1,1

	for fib<4000000 {
		fib = last + last2
		//fmt.Print(fib)
		if fib%2 == 0 {
			answer += fib
		}
		last2 = last
		last = fib
	}

	time := tools2.TimeTrack(start)
	e.Answer = fmt.Sprintf("%v (%s)", answer, time)

	return e.Answer
}

